
translation_unit
    = {external_declaration}

external_declaration
    = declaration_specifiers declarator ';'
    | declaration_specifiers declarator compound_statement

declaration
	= declaration_specifiers [declarator_list] ';'

declaration_list
    = declaration {declaration}

declarator_list
    = declarator {',' declarator}

declaration_specifiers
    = declaration_specifier {declaration_specifier}

declaration_specifier
	= storage_class_specifier | type_specifier

storage_class_specifier
    = STATIC | EXTERN

type_specifier
	= VOID | INT

declarator
	= {'*'} (IDENTIFIER | '(' declarator ')') ['(' ')']

statement
	= expression_statement
	| compound_statement
	| selection_statement
	| iteration_statement
	| jump_statement

expression_statement
	= [expression] ';'

compound_statement
	= '{' [declaration_list] {statement} '}'

selection_statement
	= IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement

iteration_statement
	= WHILE '(' expression ')' statement
	| FOR '(' [expression] ';' [expression] ';' [expression] ')'
		statement

jump_statement
	= CONTINUE ';'
	| BREAK ';'
	| RETURN [expression] ';'

expression
	= assignment_expression

assignment_expression
	= logical_or_expression
	| unary_expression '=' assignment_expression

logical_or_expression
	= logical_and_expression
	| logical_or_expression '||' logical_and_expression

logical_and_expression
	= equality_expression
	| logical_and_expression '&&' inclusive_or_expression

equality_expression
	= relational_expression
	| equality_expression '==' relational_expression
	| equality_expression '!=' relational_expression

relational_expression
	= additive_expression
	| relational_expression '<' additive_expression
	| relational_expression '>' additive_expression
	| relational_expression '<=' additive_expression
	| relational_expression '>=' additive_expression

additive_expression
	= multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression

multiplicative_expression
	= unary_expression
	| multiplicative_expression '*' cast_expression
	| multiplicative_expression '/' cast_expression

unary_expression
    = postfix_expression
    | unary_operator cast_expression

unary_operator
	= '&' | '*' | '-' | '!'

postfix_expression
    = primary_expression
    | postfix_expression '(' [argument_expression_list] ')'

primary_expression
    = IDENTIFIER
    | constant
    | '(' expression ')'

argument_expression_list
    = assignment_expression {',' assignment_expression}

constant
    = INTEGER_CONSTANT

--
keywords
ID INT_LIT
STATIC EXTERN
VOID INT
IF ELSE WHILE FOR
CONTINUE BREAK RETURN

, ; ( ) { } * / + -
= || && == != < > <= >=
& !
